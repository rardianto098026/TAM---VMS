<script src="~/vendors/Kendo/jszip.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/bootstrap/js/bootstrap.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery-slimscroll/jquery.slimscroll.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery.blockui.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery-idle-timeout/jquery.idletimeout.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery-idle-timeout/jquery.idletimer.js" type="text/javascript" asp-append-version="true" ></script>
<script src="~/Content/theme/Metronic/global/plugins/bootstrap-tagsinput/bootstrap-tagsinput.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/sweetalert.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/scripts/app.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/layout/scripts/layout.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/layout/scripts/quick-sidebar.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/layout/scripts/quick-nav.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/select2/js/select2.full.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery-validation/js/jquery.validate.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/Content/theme/Metronic/global/plugins/jquery-validation/js/additional-methods.min.js" type="text/javascript" asp-append-version="true"></script>
<script src="~/js/core.js?v=1.0.0.11" type="text/javascript" asp-append-version="true"></script>
<script src="~/js/tam-gms.js" type="text/javascript" asp-append-version="true"></script>
<script type="text/javascript">
    // get Params Query String value
    const params = new URLSearchParams(window.location.search)   
    if (params.get('tab')) {
        $("#customTab ul li a").map((index, element) => {
            if ($(element).attr('href').substring(1) == params.get('tab')) {
                $(element).trigger('click')
            }
        })
    } else {
        $("#customTab ul li:first").addClass("active")
        $(".tab-pane:first").addClass("active")
    }



    function handleValidNumber(triggerValidation, el) {
        var n = el.val(), arNumber = n.split(''),
            isInValid = function (number) {
                number = parseFloat(number, 2);
                return number < 10.00 || number > 100.00;
            };
        if (n.length >= triggerValidation - 1 && isInValid(n)) {
            if (arNumber[0] == 0) {
                arNumber.shift()
            }
            if (arNumber.length == 4) {
                arNumber.push(0)
            }
        }
        if (n.length >= triggerValidation && isInValid(n)) {
            if (el.val().split('.')[0].length == 3) {
                arNumber.shift()
                if (arNumber[0] == 0) {
                    arNumber.shift()
                }
                arNumber.pop()
                arNumber.push(el.val().split('.')[1].split('')[1])
            } else if (el.val().split('.')[1].length >= 2) {
                arNumber.pop()
            }
            el.val(arNumber.join(''));
            el.keyup();
        }
    }

    function dec2(data) {
        return Number.parseFloat(data.toString().match(/^-?\d+(?:\.\d{0,2})?/)[0]).toFixed(2);
    }

    function showTooltip(row, data, index) {
        row.children().each(function (index, item) {
            let text = $(this).text().trim();
            if (text !== undefined && text !== null && text !== "" && text.length > 0) {
                $(item).children().prop("title", text);
                $(item).children().tooltip({ placement: 'bottom' });
            }
        });
    };
    function GenerateKendoGridCellTooltip() {
        // Add tooltip to kendo grid header
        $("td[role=gridcell]").each(function (index, item) {
            var cell = $(item);
            var cellText = cell.html();
            cell.attr("title", cellText);
        });
    }

    function escapeRegExp(string) {
        return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
    }

    function replaceAll(str, find, replace) {
        return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
    }

    function ShowOriginalKendoToolTip() {
        $("#containerGrid").kendoTooltip({
            filter: "td",
            beforeShow: function (e) {
                var text = $(e.target).text().trim();
                if (text == undefined || text == null || text == "" || text.length <= 0) {
                    // don't show the tooltip if the name attribute contains null
                    e.preventDefault();
                }
            },
            content: function (e) {
                var text = $(e.target).text().trim();
                var theToolTip = "";
                if (text != undefined && text != null && text != "" && text.length > 0) {
                    theToolTip = '<div style="width: ' + text.length * .6 + 'em;">' + text + '</div>';
                }
                return theToolTip;
            }
        });
    }
    function ShowKendoToolTip(selector) {
        
        $("#" + selector + "").kendoTooltip({
            filter: "td",
            beforeShow: function (e) {
                var text = $(e.target).text().trim();
                if (text == undefined || text == null || text == "" || text.length <= 0) {
                    // don't show the tooltip if the name attribute contains null
                    e.preventDefault();
                }
            },
            content: function (e) {
                var text = $(e.target).text().trim();
                var theToolTip = "";
                var checkBr = $(e.target).html();
                if (!checkBr.includes("<br>")) {
                    if (text != undefined && text != null && text != "" && text.length > 0) {
                        if (text.length > 100) {
                            let tempLength = text.length;
                            let indexVal = 0;
                            let indexNext = 100;
                            let stringVal = "";
                            while (tempLength > 100) {
                                stringVal += text.substring(indexVal, indexNext) + "<br>";
                                tempLength -= 100;
                                indexVal += 100;
                                indexNext += 100;
                            } 
                            if (tempLength < 100) {
                                stringVal += text.substring(indexVal);
                            }

                            theToolTip = '<div style="width: ' + 100 * .6 + 'em;">' + stringVal + '</div>';
                        } else {
                            theToolTip = '<div style="width: ' + text.length * .6 + 'em;">' + text + '</div>';
                        }
                    }
                }
                else {
                    if (text != undefined && text != null && text != "" && text.length > 0) {
                        if (text.length < 90) {
                            theToolTip = '<div style="width: ' + text.length * .6 + 'em;">' + checkBr + '</div>';
                        }
                        else {
                            theToolTip = '<div style="width: ' + 90 * .6 + 'em;">' + checkBr + '</div>';
                        }
                     
                    }
                }

                return theToolTip;
            }
        });
    }

    kendo.ui.Tooltip.fn._show = function (show) {
        return function (target) {
            var e = {
                sender: this,
                target: target,
                preventDefault: function () {
                    this.isDefaultPrevented = true;
                }
            };

            if (typeof this.options.beforeShow === "function") {
                this.options.beforeShow.call(this, e);
            }
            if (!e.isDefaultPrevented) {
                // only show the tooltip if preventDefault() wasn't called..
                show.call(this, target);
            }
        };
    }(kendo.ui.Tooltip.fn._show);

    function removeFilter(filter, searchFor) {
        if (filter == null)
            return [];

        for (var x = 0; x < filter.length; x++) {
            if (filter[x].filters != null && filter[x].filters.length >= 0) {
                if (filter[x].filters.length == 0) {
                    filter.splice(x, 1);
                    return removeFilter(filter, searchFor);
                }
                filter[x].filters = removeFilter(filter[x].filters, searchFor);
            }
            else {
                if (filter[x].field == searchFor) {
                    filter.splice(x, 1);
                    return removeFilter(filter, searchFor);
                }
            }
        }
        return filter;
    }

    function clearRootLevelArray(filter) {
        for (var x = 0; x < filter.length; x++) {
            if ((filter[x].filters !== undefined || filter[x].filters != null)
                && filter[x].filters.length == 0) {
                filter.splice(x, 1);
                return clearRootLevelArray(filter);
            }
        }
        return filter;
    }
    function clearInnerLevelArray(filter) {
        for (var x = 0; x < filter.length; x++) {
            if (filter[x].filters !== undefined || filter[x].filters != null) {
                for (var y = 0; y < filter[x].filters.length; y++) {
                    if ((filter[x].filters[y].filters !== undefined || filter[x].filters[y].filters != null)
                        && filter[x].filters[y].filters.length == 0) {
                        filter[x].filters.splice(y, 1);
                        return clearInnerLevelArray(filter);
                    }
                }
            }
        }
        clearRootLevelArray(filter)//once again clear root level after clearing innerlevel
        return filter;
    }

    function multiplebycomma(e,grid,texboxid,FieldName)
    {
        var operatorDropDownList = e.container.find("select:eq(0)").data("kendoDropDownList");
        var operatorDropDownList2 = e.container.find("select:eq(1)").data("kendoDropDownList");
        var operatorDropDownList3 = e.container.find("select:eq(2)").data("kendoDropDownList");

        var firstInputValue = e.container.find("input:eq(0)");
        var SecondInputValue = e.container.find("input:eq(1)");
       
        setTimeout(function () {
            operatorDropDownList.wrapper.hide();
            operatorDropDownList2.element.attr("id", "Operation2");
            operatorDropDownList3.element.attr("id", "Operation3");
            firstInputValue.attr("id", "PNO");
            SecondInputValue.attr("id","PNO2")
          
        });
        // Find and configure filter button
        var filterButton = $(e.container).find('.k-primary');
        $(filterButton).on("click", function (e) {

            //var grid = $("#PartModalGrid").data("kendoGrid");
           
            var operation2 = $("#Operation2").val(); 
            var operation3 = $("#Operation3").val();
            var SecondPnoInput= $("#PNO2").val();
            
            e.preventDefault();

            var textbox = $(texboxid).val();
          
            var currentFilters = grid.dataSource.filter();
            if (!currentFilters) {
                currentFilters = { filters: [], logic: "and" }
            }
            currentFilters = removeFilter(currentFilters.filters, FieldName);
            currentFilters = clearRootLevelArray(currentFilters);
            currentFilters = clearInnerLevelArray(currentFilters);
            var FirstPnoInput = textbox.split(',')

            var filter = '';
            if (FirstPnoInput != "" && SecondPnoInput != "") {
                filter = {filters:[{ logic: "or", filters: [] }, { field: FieldName, operator: operation3, value: SecondPnoInput }], logic: operation2 };
              
                $.each(FirstPnoInput, function (i, v) {
                    filter.filters[0].filters.push({ field: FieldName, operator: "contains", value: $.trim(v) });
                });
            }
            else if (FirstPnoInput != "")
            {
                filter = { logic: "or", filters: [] };
               
                $.each(FirstPnoInput, function (i, v) {
                    filter.filters.push({ field: FieldName, operator: "contains", value: $.trim(v) });
                });
            }
            else {
                var partno = [];
                filter = { logic: operation2, filters: [] };
                filter.filters.push({ field: FieldName, operator: operation3, value: SecondPnoInput });
                 }
            currentFilters.push(filter)

            grid.dataSource.filter(currentFilters);
     
            

        })
    }
    function htmlDecode(value) {
        if (typeof value !== typeof "") {
            return value.toString().replace(/&lt;/g, "<").replace(/&gt;/g, ">");
        }
        return value.replace(/&lt;/g, "<").replace(/&gt;/g, ">");
    }

    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
            return false;
        }
        return true;
    }


    function formatDateyyyyMMdd(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('');
    }

    function formatDate(date, separator) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join(separator);
    }

    function addZeros(num, length) {
        var numStr = num.toString();
        while (numStr.length < length) {
            numStr = '0' + numStr;
        }

        return numStr;
    }

</script>

<script type="text/javascript">
    function idleTimer() {
        var t;
        window.onload = resetTimer;
        //window.onmousemove = resetTimer; // catches mouse movements
        //window.onmousedown = resetTimer; // catches mouse movements
        window.onclick = resetTimer;     // catches mouse clicks
        //window.onscroll = resetTimer;    // catches scrolling
        window.onkeypress = resetTimer;  //catches keyboard actions

        function logout() {
            window.location.href = "@Url.Content("~/core/account/logout")";  //Adapt to actual logout script
        }

        function resetTimer() {
            clearTimeout(t);
            t = setTimeout(logout, 2400000);  // time is in milliseconds (1000 is 1 second)
        }
    }
    idleTimer();
</script>